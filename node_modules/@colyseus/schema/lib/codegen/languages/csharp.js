"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var types_1 = require("../types");
var typeMaps = {
    "string": "string",
    "number": "float",
    "boolean": "bool",
    "int8": "int",
    "uint8": "uint",
    "int16": "short",
    "uint16": "ushort",
    "int32": "int",
    "uint32": "uint",
    "int64": "long",
    "uint64": "ulong",
    "float32": "float",
    "float64": "double",
};
/**
 * C# Code Generator
 */
var capitalize = function (s) {
    if (typeof s !== 'string')
        return '';
    return s.charAt(0).toUpperCase() + s.slice(1);
};
function generate(context, options) {
    return __spread(context.classes.map(function (structure) { return ({
        name: structure.name + ".cs",
        content: generateClass(structure, options.namespace)
    }); }), context.interfaces.map(function (structure) { return ({
        name: structure.name + ".cs",
        content: generateInterface(structure, options.namespace)
    }); }));
}
exports.generate = generate;
function generateClass(klass, namespace) {
    var indent = (namespace) ? "\t" : "";
    return types_1.getCommentHeader() + "\n\nusing Colyseus.Schema;\n" + (namespace ? "\nnamespace " + namespace + " {" : "") + "\n" + indent + "public partial class " + klass.name + " : " + klass.extends + " {\n" + klass.properties.map(function (prop) { return generateProperty(prop, indent); }).join("\n\n") + "\n" + indent + "}\n" + (namespace ? "}" : "") + "\n";
}
function generateProperty(prop, indent) {
    if (indent === void 0) { indent = ""; }
    var typeArgs = "\"" + prop.type + "\"";
    var property = "public";
    var langType;
    var initializer = "";
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (prop.type === "ref") {
            langType = (isUpcaseFirst)
                ? prop.childType
                : getChildType(prop);
        }
        else {
            var containerClass = capitalize(prop.type);
            langType = (isUpcaseFirst)
                ? containerClass + "Schema<" + prop.childType + ">"
                : containerClass + "Schema<" + getChildType(prop) + ">";
        }
        typeArgs += ", typeof(" + langType + ")";
        if (!isUpcaseFirst) {
            typeArgs += ", \"" + prop.childType + "\"";
        }
        initializer = "new " + langType + "()";
    }
    else {
        langType = getType(prop);
        initializer = "default(" + langType + ")";
    }
    property += " " + langType + " " + prop.name;
    var ret = (prop.deprecated) ? "\t\t[System.Obsolete(\"field '" + prop.name + "' is deprecated.\", true)]\n" : '';
    return ret + ("\t" + indent + "[Type(" + prop.index + ", " + typeArgs + ")]\n\t" + indent + property + " = " + initializer + ";");
}
function generateInterface(struct, namespace) {
    var indent = (namespace) ? "\t" : "";
    return types_1.getCommentHeader() + "\n\nusing Colyseus.Schema;\n" + (namespace ? "\nnamespace " + namespace + " {" : "") + "\n" + indent + "public class " + struct.name + " {\n" + struct.properties.map(function (prop) { return "\t" + indent + "public " + getType(prop) + " " + prop.name + ";"; }).join("\n") + "\n" + indent + "}\n" + (namespace ? "}" : "") + "\n";
}
function getChildType(prop) {
    return typeMaps[prop.childType];
}
function getType(prop) {
    return (prop.type === "array")
        ? typeMaps[prop.childType] + "[]"
        : typeMaps[prop.type];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NoYXJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvZGVnZW4vbGFuZ3VhZ2VzL2NzaGFycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGtDQUE4RTtBQUk5RSxJQUFNLFFBQVEsR0FBRztJQUNiLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLFFBQVEsRUFBRSxPQUFPO0lBQ2pCLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLE1BQU0sRUFBRSxLQUFLO0lBQ2IsT0FBTyxFQUFFLE1BQU07SUFDZixPQUFPLEVBQUUsT0FBTztJQUNoQixRQUFRLEVBQUUsUUFBUTtJQUNsQixPQUFPLEVBQUUsS0FBSztJQUNkLFFBQVEsRUFBRSxNQUFNO0lBQ2hCLE9BQU8sRUFBRSxNQUFNO0lBQ2YsUUFBUSxFQUFFLE9BQU87SUFDakIsU0FBUyxFQUFFLE9BQU87SUFDbEIsU0FBUyxFQUFFLFFBQVE7Q0FDdEIsQ0FBQTtBQUVEOztHQUVHO0FBQ0gsSUFBTSxVQUFVLEdBQUcsVUFBQyxDQUFDO0lBQ2pCLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUTtRQUFFLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQTtBQUVELFNBQWdCLFFBQVEsQ0FBRSxPQUFnQixFQUFFLE9BQXdCO0lBQ2hFLGdCQUNPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsQ0FBQztRQUNqQyxJQUFJLEVBQUssU0FBUyxDQUFDLElBQUksUUFBSztRQUM1QixPQUFPLEVBQUUsYUFBYSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO0tBQ3ZELENBQUMsRUFIa0MsQ0FHbEMsQ0FBQyxFQUNBLE9BQU8s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V0FBTSxXQUFXLE1BQUcsQ0FBQSxDQUFDO0FBQzFDLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLE1BQWlCLEVBQUUsU0FBaUI7SUFDM0QsSUFBTSxNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDdkMsT0FBVSx3QkFBZ0IsRUFBRSxxQ0FHOUIsU0FBUyxDQUFDLENBQUMsQ0FBQyxpQkFBZSxTQUFTLE9BQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUM3QyxNQUFNLHFCQUFnQixNQUFNLENBQUMsSUFBSSxZQUNqQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLE9BQUssTUFBTSxlQUFVLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBSSxJQUFJLENBQUMsSUFBSSxNQUFHLEVBQWxELENBQWtELENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQzVGLE1BQU0sWUFDTixTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUNyQixDQUFDO0FBQ0YsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLElBQWM7SUFDaEMsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxJQUFjO0lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQztRQUMxQixDQUFDLENBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBSTtRQUNqQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xhc3MsIFByb3BlcnR5LCBGaWxlLCBnZXRDb21tZW50SGVhZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IEdlbmVyYXRlT3B0aW9ucyB9IGZyb20gXCIuLi9hcGlcIjtcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuY29uc3QgdHlwZU1hcHMgPSB7XG4gICAgXCJzdHJpbmdcIjogXCJzdHJpbmdcIixcbiAgICBcIm51bWJlclwiOiBcImZsb2F0XCIsXG4gICAgXCJib29sZWFuXCI6IFwiYm9vbFwiLFxuICAgIFwiaW50OFwiOiBcImludFwiLFxuICAgIFwidWludDhcIjogXCJ1aW50XCIsXG4gICAgXCJpbnQxNlwiOiBcInNob3J0XCIsXG4gICAgXCJ1aW50MTZcIjogXCJ1c2hvcnRcIixcbiAgICBcImludDMyXCI6IFwiaW50XCIsXG4gICAgXCJ1aW50MzJcIjogXCJ1aW50XCIsXG4gICAgXCJpbnQ2NFwiOiBcImxvbmdcIixcbiAgICBcInVpbnQ2NFwiOiBcInVsb25nXCIsXG4gICAgXCJmbG9hdDMyXCI6IFwiZmxvYXRcIixcbiAgICBcImZsb2F0NjRcIjogXCJkb3VibGVcIixcbn1cblxuLyoqXG4gKiBDIyBDb2RlIEdlbmVyYXRvclxuICovXG5jb25zdCBjYXBpdGFsaXplID0gKHMpID0+IHtcbiAgICBpZiAodHlwZW9mIHMgIT09ICdzdHJpbmcnKSByZXR1cm4gJydcbiAgICByZXR1cm4gcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZSAoY29udGV4dDogQ29udGV4dCwgb3B0aW9uczogR2VuZXJhdGVPcHRpb25zKTogRmlsZVtdIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAuLi5jb250ZXh0LmNsYXNzZXMubWFwKHN0cnVjdHVyZSA9PiAoe1xuICAgICAgICAgICAgbmFtZTogYCR7c3RydWN0dXJlLm5hbWV9LmNzYCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGdlbmVyYXRlQ2xhc3Moc3RydWN0dXJlLCBvcHRpb25zLm5hbWVzcGFjZSlcbiAgICAgICAgfSkpLFxuICAgICAgICAuLi5jb250ZXh0LmludGVyZmFjZXMubWFwKHN0cnVjdHVyZSA9PiAoe1xuICAgICAgICAgICAgbmFtZTogYCR7c3RydWN0dXJlLm5hbWV9LmNzYCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGdlbmVyYXRlSW50ZXJmYWNlKHN0cnVjdHVyZSwgb3B0aW9ucy5uYW1lc3BhY2UpXG4gICAgICAgIH0pKVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ2xhc3Moa2xhc3M6IENsYXNzLCBuYW1lc3BhY2U6IHN0cmluZykge1xuICAgIGNvbnN0IGluZGVudCA9IChuYW1lc3BhY2UpID8gXCJcXHRcIiA6IFwiXCI7XG4gICAgcmV0dXJuIGAke2dldENvbW1lbnRIZWFkZXIoKX1cblxudXNpbmcgQ29seXNldXMuU2NoZW1hO1xuJHtuYW1lc3BhY2UgPyBgXFxubmFtZXNwYWNlICR7bmFtZXNwYWNlfSB7YCA6IFwiXCJ9XG4ke2luZGVudH1wdWJsaWMgcGFydGlhbCBjbGFzcyAke2tsYXNzLm5hbWV9IDogJHtrbGFzcy5leHRlbmRzfSB7XG4ke2tsYXNzLnByb3BlcnRpZXMubWFwKHByb3AgPT4gZ2VuZXJhdGVQcm9wZXJ0eShwcm9wLCBpbmRlbnQpKS5qb2luKFwiXFxuXFxuXCIpfVxuJHtpbmRlbnR9fVxuJHtuYW1lc3BhY2UgPyBcIn1cIiA6IFwiXCJ9XG5gO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVByb3BlcnR5KHByb3A6IFByb3BlcnR5LCBpbmRlbnQ6IHN0cmluZyA9IFwiXCIpIHtcbiAgICBsZXQgdHlwZUFyZ3MgPSBgXCIke3Byb3AudHlwZX1cImA7XG4gICAgbGV0IHByb3BlcnR5ID0gXCJwdWJsaWNcIjtcbiAgICBsZXQgbGFuZ1R5cGU6IHN0cmluZztcbiAgICBsZXQgaW5pdGlhbGl6ZXIgPSBcIlwiO1xuXG4gICAgaWYgKHByb3AuY2hpbGRUeXBlKSB7XG4gICAgICAgIGNvbnN0IGlzVXBjYXNlRmlyc3QgPSBwcm9wLmNoaWxkVHlwZS5tYXRjaCgvXltBLVpdLyk7XG5cbiAgICAgICAgaWYocHJvcC50eXBlID09PSBcInJlZlwiKSB7XG4gICAgICAgICAgICBsYW5nVHlwZSA9IChpc1VwY2FzZUZpcnN0KVxuICAgICAgICAgICAgICAgID8gcHJvcC5jaGlsZFR5cGVcbiAgICAgICAgICAgICAgICA6IGdldENoaWxkVHlwZShwcm9wKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyQ2xhc3MgPSBjYXBpdGFsaXplKHByb3AudHlwZSk7XG5cbiAgICAgICAgICAgIGxhbmdUeXBlID0gKGlzVXBjYXNlRmlyc3QpXG4gICAgICAgICAgICAgICAgPyBgJHtjb250YWluZXJDbGFzc31TY2hlbWE8JHtwcm9wLmNoaWxkVHlwZX0+YFxuICAgICAgICAgICAgICAgIDogYCR7Y29udGFpbmVyQ2xhc3N9U2NoZW1hPCR7Z2V0Q2hpbGRUeXBlKHByb3ApfT5gO1xuICAgICAgICB9XG5cbiAgICAgICAgdHlwZUFyZ3MgKz0gYCwgdHlwZW9mKCR7bGFuZ1R5cGV9KWA7XG5cbiAgICAgICAgaWYgKCFpc1VwY2FzZUZpcnN0KSB7XG4gICAgICAgICAgICB0eXBlQXJncyArPSBgLCBcIiR7cHJvcC5jaGlsZFR5cGV9XCJgO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5pdGlhbGl6ZXIgPSBgbmV3ICR7bGFuZ1R5cGV9KClgO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGFuZ1R5cGUgPSBnZXRUeXBlKHByb3ApO1xuICAgICAgICBpbml0aWFsaXplciA9IGBkZWZhdWx0KCR7bGFuZ1R5cGV9KWA7XG4gICAgfVxuXG4gICAgcHJvcGVydHkgKz0gYCAke2xhbmdUeXBlfSAke3Byb3AubmFtZX1gO1xuXG4gICAgbGV0IHJldCA9IChwcm9wLmRlcHJlY2F0ZWQpID8gYFxcdFxcdFtTeXN0ZW0uT2Jzb2xldGUoXCJmaWVsZCAnJHtwcm9wLm5hbWV9JyBpcyBkZXByZWNhdGVkLlwiLCB0cnVlKV1cXG5gIDogJyc7XG5cbiAgICByZXR1cm4gcmV0ICsgYFxcdCR7aW5kZW50fVtUeXBlKCR7cHJvcC5pbmRleH0sICR7dHlwZUFyZ3N9KV1cblxcdCR7aW5kZW50fSR7cHJvcGVydHl9ID0gJHtpbml0aWFsaXplcn07YDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVJbnRlcmZhY2Uoc3RydWN0OiBJbnRlcmZhY2UsIG5hbWVzcGFjZTogc3RyaW5nKSB7XG4gICAgY29uc3QgaW5kZW50ID0gKG5hbWVzcGFjZSkgPyBcIlxcdFwiIDogXCJcIjtcbiAgICByZXR1cm4gYCR7Z2V0Q29tbWVudEhlYWRlcigpfVxuXG51c2luZyBDb2x5c2V1cy5TY2hlbWE7XG4ke25hbWVzcGFjZSA/IGBcXG5uYW1lc3BhY2UgJHtuYW1lc3BhY2V9IHtgIDogXCJcIn1cbiR7aW5kZW50fXB1YmxpYyBjbGFzcyAke3N0cnVjdC5uYW1lfSB7XG4ke3N0cnVjdC5wcm9wZXJ0aWVzLm1hcChwcm9wID0+IGBcXHQke2luZGVudH1wdWJsaWMgJHtnZXRUeXBlKHByb3ApfSAke3Byb3AubmFtZX07YCkuam9pbihcIlxcblwiKX1cbiR7aW5kZW50fX1cbiR7bmFtZXNwYWNlID8gXCJ9XCIgOiBcIlwifVxuYDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGRUeXBlKHByb3A6IFByb3BlcnR5KSB7XG4gICAgcmV0dXJuIHR5cGVNYXBzW3Byb3AuY2hpbGRUeXBlXTtcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZShwcm9wOiBQcm9wZXJ0eSkge1xuICAgIHJldHVybiAocHJvcC50eXBlID09PSBcImFycmF5XCIpXG4gICAgICAgID8gYCR7dHlwZU1hcHNbcHJvcC5jaGlsZFR5cGVdfVtdYFxuICAgICAgICA6IHR5cGVNYXBzW3Byb3AudHlwZV07XG59Il19